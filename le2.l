(class +Element)
	#parent
	#children


(class +Node +Element)
	dm eval> (env)
		#evaluation: (computing, programming) Determination of the value of a variable or expression.
	(dm declare> (env)
	(dm parse> (tokens)
	(dm 2lml ()
(class +ProgramNode)
	(put '*Class 'children '((name +TextNode)(statements +StatementsNode)))
	(put '*Class 'tokens '(
	
(class +StatementsNode)
	#items
	#no maps_to, you dont parse something into Statements
(class +TextNode +Node)
(class +NumberNode +TextNode)
(class +DefunNode
(class +CallNode
(de is_number
(de is_text #text is enclosed by parentheses

assertz(is_syntactically x y

#a predicate that maps tokens to node
maps_to(Token, +NumberNode):-
	is_number(token).

maps_to(Token, +NumberNode):-
	is_text(token).


(bye)
(scraps)


(class +LispNumber...



class +ClassNode
	# name, parent


	(dm build_in
		(> builtin add new FunctionNode (tags = ((t "class") (ch name) 
		
		
class Node:
	parent
	children:
		by number
		
	
	prev>
	next>
	
class FoldableNode(Node)
	#isfolded
	toggle_folded>
	


de to_lemon (LISP_CODE)
#creates one node object for each function call


tags
